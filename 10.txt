USE vk;

--Проанализировать какие запросы могут выполняться наиболее часто в процессе работы приложения и добавить необходимые индексы.

CREATE INDEX users_last_name_idx ON users(last_name);
CREATE INDEX users_first_name_last_name_idx ON users(first_name, last_name);
DESC media;
CREATE INDEX media_filename_idx ON media(filename);
SELECT * from communities;
CREATE INDEX communities_name_idx ON communities(name);


--Задание на оконные функции
--Построить запрос, который будет выводить следующие столбцы:
--имя группы
--среднее количество пользователей в группах (сумма количестива пользователей во всех группах делённая на количество групп)
--самый молодой пользователь в группе (желательно вывести имя и фамилию)
--самый старший пользователь в группе (желательно вывести имя и фамилию)
--количество пользователей в группе
--всего пользователей в системе (количество пользователей в таблице users)
--отношение в процентах для последних двух значений (общее количество пользователей в группе / всего пользователей в системе) * 100


SELECT DISTINCT 
communities.name,
count(communities_users.user_id) OVER () / (SELECT count(*) FROM communities) AS average,
min(profiles.birthday) OVER w_com AS oldest,
max(profiles.birthday) OVER w_com AS yongest,
count(communities_users.user_id) OVER w_com AS total_in_group,
(SELECT count(*) FROM users) AS total_in_system,
(count(communities_users.user_id) OVER w_com / (SELECT count(*) FROM users) * 100) AS "%"
FROM (communities
       JOIN communities_users
        ON communities.id = communities_users.community_id
        JOIN profiles 
        ON profiles.user_id = communities_users.user_id)
        WINDOW w_com AS (PARTITION BY communities_users.community_id);
